
#+options: ':nil *:t -:t ::t <:t H:2 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+title: S4 Circuitos Digitales
#+date: 2024-05-13
#+author: Lenin G. Falconí
#+email: lenin.falconi@epn.edu.ec
#+language: es
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 27.1 (Org mode 9.3)

# to enable beamer mode M-x org-beamer-mode
#+options: H:2
#+latex_class: beamer
#+columns: %45ITEM %10BEAMER_env(Env) %10BEAMER_act(Act) %4BEAMER_col(Col) %8BEAMER_opt(Opt)
#+beamer_theme: Madrid
#+beamer_color_theme:
#+beamer_font_theme:
#+beamer_inner_theme:
#+beamer_outer_theme:
#+beamer_header:
#+LATEX_HEADER: \usepackage{xcolor}
#+LATEX_HEADER: \usepackage{circuitikz}
* Circuitos Digitales
# ** Máquinas de Estados Finitos
#    :PROPERTIES:
#    :BEAMER_opt: allowframebreaks
#    :END:
# - Modelo computacional que describe un fenómeno
# - Es un modelo computacional que describe las transiciones entre
#   diferentes estados posibles.
# - Permite inferir el **algoritmo** o **programa** a construir para
#   resolver un problema.
# #+CAPTION: Máquina de estado Finito para obtener tres tokens Rojos consecutivos
# [[./images/FSM-example.png]]
  
** Diseño de Circuitos Combinacionales:
- Determinar la Tabla de Verdad del problema o Deducir la Función
  Booleana
- Aplicar el Álgebra de Boole o el Mapa de Karnaugh para simplificar
  el circuito
- Realizar el circuito como una combinación de suma de productos
  (i.e. SOP) o productos de sumas (i.e. POS)
* Simplificación de Expresiones Booleanas con Mapas K
** Simplificación de Expresiones Booleanas con Mapas K
*** Texto                                                             :Texto:
:PROPERTIES:
:BEAMER_col: 0.5
:END:
- Es un método gráfico para simplificar expresiones booleanas
- Puede ser utilizado tanto para obtener la representación SOP o POS
- Consiste en formar tablas de un orden $2^n$, donde $n$ es el número
  de variables de entrada del problema.
*** Imagen                                                           :Imagen:
:PROPERTIES:
:BEAMER_col: 0.5
:END:
[[./images/mapaK.png]]
** Procedimiento Mapas K para Min-Terms
:PROPERTIES:
:BEAMER_opt: allowframebreaks
:END:
1. Formar una tabla con $2^n$ celdas
2. Colocar los 1 en las ubicaciones o celdas correspondientes
3. Proceder a agrupar los 1 *adyacentes* en grupos de potencias
   de 2. Tratar de formar el menor número de grupos y que contengan la
   mayor cantidad de 1s.
4. En los grupos formados, las variables que cambian de valor de 0 a 1
   (y viceversa) se eliminan. Las variables que no cambian de valor se
   mantienen.
5. Se combinan todos los grupos de expresiones mediante una suma de
   productos.
6. Las variables se representan complementadas si el valor en la celda
   del grupo (i.e. min-term) es 0.
* Multiplexor
** Ejemplo Circuito Multiplexor
   :PROPERTIES:
   :BEAMER_opt: allowframebreaks
   :END:

Un multiplexor es un circuito digital que conecta varias entradas a
una única salida. Dadas $n$ líneas de control, el circuito puede
direccionar hasta $2^n$ señales. La Tabla [[tab-multiplexor]] representa la lógica
para el caso de $n=2$. Obtenga el circuito digital en compuertas.

#+Caption: Tabla de Verdad de un Multiplexor
#+NAME: tab-multiplexor
+--+--+--+
|S2|S1|F |
+--+--+--+
|0 |0 |D0|
+--+--+--+
|0 |1 |D1|
+--+--+--+
|1 |0 |D2|
+--+--+--+
|1 |1 |D3|
+--+--+--+

** Solución Circuito Multiplexor
   :PROPERTIES:
   :BEAMER_opt: allowframebreaks
   :END:

Dado que nos interesa que el valor de cada entrada digital $D_i$ se
obtenga en la salida, no sería factible hacer una reducción booleana o
de mapa de K. Por tanto, la ecuación booleana sería:

$$F=\bar{S_2}\bar{S_1}D_0+\bar{S_2}S_1D_1+S_2\bar{S_1}D_2+S_2S_1D_3$$

* Circuito Combinacional de Alarma Básico
** Ejemplo Sistema de Alarma Básico
   :PROPERTIES:
   :BEAMER_opt: allowframebreaks
   :END:
Considere la Figura [[fig-maq-estado-alarma]] que representa una máquina
de estado para un sistema de alarma básico de un cuarto o bodega. El
sistema está conformado de un sensor de apertura de puerta $S_p$, un
sensor de apertura de ventana $S_v$, un sensor de movimiento $S_m$ y
un interruptor $I$ que enciende o activa la alarma.

#+NAME: fig-maq-estado-alarma
#+CAPTION: Máquina de Estado Finito de Alarma
[[./images/maquinaEstadoFinitoAlarma.png]]

1. Infiera el comportamiento del sistema a partir de la máquina de estado
2. Deduzca la tabla de verdad del sistema, pues se pretende obtener
   una solución a través de compuertas lógicas al problema.
3. Obtenga una función simplificada booleana usando Mapas K.
4. Implemente el Circuito.

Asuma que:
- Abierto = 0
- Cerrado = 1
- Switch en ON = 1
- Switch en OFF = 0
- Sensor de Movimiento ON = 1
- Sensor de Movimiento OFF = 0

** Solución Sistema de Alarma Básico
   :PROPERTIES:
   :BEAMER_opt: allowframebreaks
   :END:

A partir de la máquina de estado se puede inferir que:

1. El sistema no funciona cuando el switch de activación de la alarma
   esta en OFF.
2. Cuando el sistema se activa (i.e. $I=1$), se monitorea los sensores
   $S_p$ y $S_v$.
3. Si uno de los sensores se activa se pasa al estado $q_2$
4. En el estado $q_2$ se espera la activación del sensor de
   movimiento. Si éste pasa a 1, entonces detecta movimiento y se pasa
   al estado final $q_3$, activando la alarma.

Dado que el sistema depende de las señales $I$, $S_p$, $S_v$ y $S_m$,
se tiene un total de $2^4$ posibles combinaciones o estados. Sin
embargo, los estados donde $I=0$ (OFF) conlleva a la no activación del
sistema y por tanto de la alarma. En consecuencia, la Tabla
\ref{tab-circAlarma} presenta el comportamiento lógico esperado del
sistema

\scriptsize
\begin{table}
  \caption{Tabla de Verdad Circuito de Alarma}
  \label{tab-circAlarma}
  \begin{tabular}{|cccc|c|}
    \hline
    I & $S_p$ & $S_v$ & $S_m$ & F \\ \hline
    1 & 0 & 0 & 0 & 0 \\
    1 & 0 & 0 & 1 & 1 \\
    1 & 0 & 1 & 0 & 0 \\
    1 & 0 & 1 & 1 & 1 \\
    1 & 1 & 0 & 0 & 0 \\
    1 & 1 & 0 & 1 & 1 \\
    1 & 1 & 1 & 0 & 0 \\
    1 & 1 & 1 & 1 & 0 \\ \hline
    
  \end{tabular}
\end{table}

Para simplificar se usa el Mapa de Karnaugh como se muestra en la
Tabla \ref{tab-mapak}

\begin{table}
  \label{tab-mapak}
  \caption{Mapa de Karnaugh}
  \begin{tabular}{|l|c|c|c|c|}
    \hline
    {} & \multicolumn{4}{c|}{$S_v$, $S_m$}\\\hline  
    I,$S_p$ & 00 & 01 & 11 &10 \\ \hline
    00 & {} & {} & {} & {} \\ \hline
    01 & {} & {} & {} & {} \\ \hline
    11 & {} & 1 & {} & {} \\ \hline
    10 & {} & 1 & 1 & {} \\ \hline
  \end{tabular}
\end{table}

En el Mapa se puede formar dos grupos de 2 (contando filas y columnas
en el contenido):

- El formado en la segunda columna con los 1 de la tercera y
cuarta fila
- El formado en la 4 fila y las columnas 2 y 3.

De ahí que realizando las reducciones de Karnaugh se obtiene:

$$F=I\overline{S_p}S_m+I\overline{S_v}S_m$$

que puede escribirse como:

$$F=IS_m(\overline{S_p}+\overline{S_v})$$

La Figura [[fig_alarma]] muestra el circuito a implementar

#+NAME: fig_alarma
#+CAPTION: Circuito Alarma Digital Básica
[[./images/Alarma.png]]

Sin embargo, ¿puede este circuito ser práctico en la realidad?
¿Existen opciones de mejora?

* Simulación Matlab
** Simulación Matlab
:PROPERTIES:
:BEAMER_opt: allowframebreaks
:END:

Para hacer la simulación de circuitos digitales en Matlab se requiere
usar Simulink. Para esto

1. Abra Matlab o [[https://matlab.mathworks.com/][Matlab Online]]
2. En la ficha /home/ seleccionar /Simulink/
3. Se abre una pantalla en la que puede seleccionar abrir un modelo en
   blanco (Blank Model) o abrir un archivo. Puede encontrar archivos
   en [[https://github.com/LeninGF/EPN-Lectures/tree/main/iccd332ArqComp-2024-B/Simulaciones][GitHub]]
4. Para colocar los elementos necesarios puede dar doble clic en
   cualquier parte del área de trabajo y a lo que se despliegue el
   cuadro de búsqueda de bloques escriba el nombre de un bloque que
   requiera que puede ser:
   - manual switch
   - constant
   - and, or, not, xor, nand, nor
   - display
5. Configure las compuertas. Puede alterar el número de entradas
   digitales dando doble clic sobre la compuerta respectiva.
6. Realice las conexiones de los bloques según sea el diseño del circuito
7. Configure la simulación: El Stop Time de la pestaña /SIMULATE/ se
   coloca en **inf**. Esto permitirá que modifique las conexiones a
   las constantes y pueda visualizar el resultado.
8. Ejecute la simulación dando clic en RUN
** Simulación Matlab
#+caption: Simulación XOR
#+attr_latex: :height 0.7\textheight
#+label: fig:label
[[file:images/Matlab.png]]


* Taller de Ejercicios
** Taller
   :PROPERTIES:
   :BEAMER_opt: allowframebreaks
   :END:

Dada la siguiente tabla de verdad, simplificar utilizando Mapa de
Karnaugh y obtener el respectivo circuito combinacional. Simular el
resultado.
#+ATTR_LATEX: :fontsize \scriptsize
+--+--+--+--+
|A |B |C |F |
+--+--+--+--+
|0 |0 |0 |1 |
+--+--+--+--+
|0 |0 |1 |1 |
+--+--+--+--+
|0 |1 |0 |0 |
+--+--+--+--+
|0 |1 |1 |1 |
+--+--+--+--+
|1 |0 |0 |0 |
+--+--+--+--+
|1 |0 |1 |1 |
+--+--+--+--+
|1 |1 |0 |0 |
+--+--+--+--+
|1 |1 |1 |1 |
+--+--+--+--+

\newpage

Obtener un circuito combinacional que realice la suma binaria. Para
esto, considere que el sumador se resuelve integrado en cascada
diferentes etapas que suman los dígitos de los sumandos y el acarreo,
que inicia en 0.

1. Obtenga la Tabla de Verdad
2. Deduzca las expresiones booleanas reducidas
3. Implemente el circuito en Matlab y realice la simulación

# ** Taller 3 
#    :PROPERTIES:
#    :BEAMER_opt: allowframebreaks
#    :END:

# Un sistema de control de presión de agua dispone de sensores que
# devuelven una señal de tipo Booleana cuando la Presión es menor de un
# límite inferior $L_1$ y mayor a un Límite superior $H_1$. Diseñe un
# circuito digital tal que genere una señal digital Booleana que
# controle una bomba con las siguientes condiciones:

# 1. Si la Presión es mayor que $H_1$, apagar la bomba
# 2. Si la Presión es menor que $L_1$, encender la bomba
# 3. Si la Presión está en un rango de operación, el operador puede
#    encender la bomba si acciona un switch $I_1$.
# 4. El operador no podrá arrancar la bomba si la presión es superior al
#    nivel $H_1$
# 5. Si el sensor térmico del motor se activa, debe apagarse la bomba
#    para evitar sobrecarga.

# Escriba la Tabla de verdad, simplifique usando Mapa de Karnaugh y
# obtenga el circuito digital correspondiente.


# ** Estructura Superior del Computador
# *** Texto                                                             :BMCOL:
#     :PROPERTIES:
#     :BEAMER_col: 0.5
#     :END:
# - El computador interacciona con el medio a través de periféricos o
#   líneas de comunicación.
# - CPU: control del funcionamiento del computador y procesamiento.
# - Memoria Principal: almacena datos
# - I/O: transferencia de datos entre el computador y el entorno externo.
# - Sistemas de Interconexión: son los buses de comunicación
# *** Imagen                                                     :BMCOL:Imagen:
#     :PROPERTIES:
#     :BEAMER_col: 0.5
#     :END:

# [[./images/EstructuraComputador.png]]

# ** CPU
# Se encarga del control del funcionamiento del computador y del
# procesamiento.
# #+CAPTION: CPU
# [[./images/cpu.png]]
# ** Unidad de Control
# Conformada por los distintos circuitos digitales, registros,
# decodificadores y memorias necesarios para el funcionamiento del
# computador.

# #+CAPTION: Unidad de Control
# [[./images/ControlUnit.png]]

# ** Componentes del Computador
# #+ATTR_LATEX: :width 0.6\textwidth
# [[./images/componentesComputador.png]]

# ** Concepto de Memoria
# *** Texto                                                             :BMCOL:
#     :PROPERTIES:
#     :BEAMER_col: 0.5
#     :END:
# - Puede ser de escritura o lectura dependiendo de una señal
#   de control
# - Las distintas operaciones y datos con los que trabaja el computador
#   son mapeados con direcciones de memoria en donde sus valores se
#   encuentran almacenados.
# - Se puede pensar como una
#   lista o tabla de elementos almacenados.

#  # - El procesador utiliza una dirección de memoria y una señal de
#  #   control para definir un ciclo de escritura o lectura.
# *** Imagen                                                     :BMCOL:Imagen:
#     :PROPERTIES:
#     :BEAMER_col: 0.5
#     :END:

# [[./images/ConceptoMemoria.png]]

# ** Lenguaje de Transferencia de Registros (RTL)
#    :PROPERTIES:
#    :BEAMER_opt: allowframebreaks
#    :END:

# - Permite definir de manera sencilla las operaciones en el computador
# - No es un lenguaje ensamblador
# - No es un lenguaje de Programación
# - Es una notación
# - Distingue entre las /localidades/ de memoria y su /contenido/
# - Se usa [ ] para indicar el contenido de una ubicación de memoria
# - El símbolo $\leftarrow$ se usa para indicar /transferencia de datos/


# 1. Suponga una pequeña memoria que tenga 4 bits para el bus de
#    dirección ¿cuántas localidades puede almacenar?

# 2. Estructure la tabla de memoria suponiendo que el contenido de la
#    memoria será de máximo 8 bits.

# ** Solución

# Si las direcciones son de 4 bits, se puede almacenar hasta
# $2^{n=4}=16$ localidades.

# #+ATTR_LATEX: :font \scriptsize
# +-+-+-+-+-+-+-+-+-+-+-+-+
# |direcc |  dato         |
# +-+-+-+-+-+-+-+-+-+-+-+-+
# |0|0|0|0| | | | | | | | |
# +-+-+-+-+-+-+-+-+-+-+-+-+
# |0|0|0|1| | | | | | | | |
# +-+-+-+-+-+-+-+-+-+-+-+-+
# |0|0|1|0| | | | | | | | |
# +-+-+-+-+-+-+-+-+-+-+-+-+
# |.|.|.|.| | | | | | | | |
# +-+-+-+-+-+-+-+-+-+-+-+-+
# |.|.|.|.| | | | | | | | |
# +-+-+-+-+-+-+-+-+-+-+-+-+
# |1|1|1|1| | | | | | | | |
# +-+-+-+-+-+-+-+-+-+-+-+-+

# En Hexadecimal tendríamos localidades desde la $0x0$ hasta la $0xF$

# ** Lenguaje de Transferencia de Registros (RTL)
#    :PROPERTIES:
#    :BEAMER_opt: allowframebreaks
#    :END:
# - $[0x0F]\leftarrow [0x0F]+1$: el contenido de la localidad de
#   memoria $0x0F$ se incrementa en 1 y se almacena en la misma localidad
# - El símbolo $=$ se usa alternativamente para expresar transferencia

# Considere las siguientes operaciones:

# 1. $[0x14]=5$: el contenido de la dirección de memoria $0x14$ es 5
# 1. $[0x14] \leftarrow 6$: el valor o literal 6 se carga en $0x14$
# 1. $[0x14] \leftarrow [6]$: el contenido de la dirección $0x06$ se
#    carga en $0x14$
# 1. $[0x0C] \leftarrow [0x03]+3$: el contenido de la dirección $0x03$
#    se suma con el valor 3 y el resultado se  carga en $0x0C$
# 1. $[0x13] \leftarrow [0x07]+[0x08]$: la suma de los contenidos de
#    las localidades de memoria 7 y 8 se colocan en la dirección 19
#    (19_{10}=13_{16})
# 1. $[0x04]\leftarrow [[0x02]]$: *puntero* o *direccionamiento
#    indirecto*. El valor a copiar en la localidad 4 es el contenido en
#    la dirección definida por el contenido de la localidad 2.

# ** Ejercicio
#    :PROPERTIES:
#    :BEAMER_opt: allowframebreaks
#    :END:

# *** Texto                                                             :BMCOL:
#     :PROPERTIES:
#     :BEAMER_col: 0.6
#     :END:
# Considere la siguiente memoria abstracta. Obtenga: $X =
# 3+[0x04]+[1+[0x03]]+[[0x0A]]+[[0x09]*3]$
# *** Tabla                                                       :BMCOL:Tabla:
#     :PROPERTIES:
#     :BEAMER_col: 0.4
#     :END:

# +----------+----------+
# |Dirección | Dato     |
# +----------+----------+
# |  0x00    |   6      |
# +----------+----------+
# |  0x01    |   2      |
# +----------+----------+
# |  0x02    |   3      |
# +----------+----------+
# |  0x03    |   4      |
# +----------+----------+
# |  0x04    |   5      |
# +----------+----------+
# |  0x05    |   2      |
# +----------+----------+
# |  0x06    |   8      |
# +----------+----------+
# |  0x07    |   1      |
# +----------+----------+
# |  0x08    |   5      |
# +----------+----------+
# |  0x09    |   2      |
# +----------+----------+
# |  0x0A    |   1      |
# +----------+----------+
# |  0x0B    |   5      |
# +----------+----------+

# ** Ejercicio - Solución
#    :PROPERTIES:
#    :BEAMER_opt: allowframebreaks
#    :END:

# *** Texto                                                             :BMCOL:
#     :PROPERTIES:
#     :BEAMER_col: 0.6
#     :END:
# Considere la siguiente memoria abstracta. Obtenga: $X =
# 3+[0x04]+[1+[0x03]]+[[0x0A]]+[[0x09]*3]$

# $X = 3+5+2+2+8$
# *** Tabla                                                       :BMCOL:Tabla:
#     :PROPERTIES:
#     :BEAMER_col: 0.4
#     :END:

# +----------+----------+
# |Dirección | Dato     |
# +----------+----------+
# |  0x00    |   6      |
# +----------+----------+
# |  0x01    |   2      |
# +----------+----------+
# |  0x02    |   3      |
# +----------+----------+
# |  0x03    |   4      |
# +----------+----------+
# |  0x04    |   5      |
# +----------+----------+
# |  0x05    |   2      |
# +----------+----------+
# |  0x06    |   8      |
# +----------+----------+
# |  0x07    |   1      |
# +----------+----------+
# |  0x08    |   5      |
# +----------+----------+
# |  0x09    |   2      |
# +----------+----------+
# |  0x0A    |   1      |
# +----------+----------+
# |  0x0B    |   5      |
# +----------+----------+


# ** Lógica Digital - Circuito Eléctrico
#    :PROPERTIES:
#    :BEAMER_opt: allowframebreaks
#    :END:
# - Los materiales conductores tienen la característica de producir una
#   corriente eléctrica en presencia de un campo eléctrico.
# - El voltaje $V$, la corriente $I$ y la resistencia $R$ se relacionan
#   con la Ley de Ohm $V=IR$
# - Un semiconductor es un material que exhibe las características tanto
#   de un buen conductor como de un buen aislante. Esta característica
#   se controla por una entrada de control.
# - Un transistor es un semiconductor que opera como un switch
#   digital. Cambia de alta a baja resistencia dependiendo del estado de
#   una señal de entrada.

# ** Compuertas Lógicas
# *** Texto                                                             :BMCOL:
#     :PROPERTIES:
#     :BEAMER_col: 0.4
#     :END:
# - Son arreglos de circuitos con transistores que permiten realizar
#   operaciones lógicas
# - Un transistor tiene un voltaje de switching de 0.7V.
# - Con un $V \ge 0.7$, el transistor se activa y la resistencia entre
#   colector y emisor se reduce, colocando la salida a un bajo voltaje.
# - El comportamiento del circuito se puede expresar en una **tabla de
#   verdad**
# *** Imagen                                                     :BMCOL:Imagen:
#     :PROPERTIES:
#     :BEAMER_col: 0.6
#     :END:
# [[./images/notGate.png]]

# ** Compuertas Lógicas
# *** Texto                                                             :BMCOL:
#     :PROPERTIES:
#     :BEAMER_col: 0.4
#     :END:
#     \begin{tabular}{ccc}
#     \hline
#     $input_1$ & $input_2$ & salida \\ \hline
#     0 & 0 & 0\\
#     0 & 1 & 0\\
#     1 & 0 & 0\\
#     1 & 1 & 1\\ \hline
#     \end{tabular}
# *** Imagen                                                     :BMCOL:Imagen:
#     :PROPERTIES:
#     :BEAMER_col: 0.6
#     :END:
# [[./images/andGate.png]]

# ** Álgebra de Boole y Compuertas Lógicas
#    :PROPERTIES:
#    :BEAMER_opt: allowframebreaks
#    :END:

# - Utilizada para resolver problemas de diseño de circuitos de
#   conmutación
# - Las variables y las operaciones son **lógicas**
# - 1 equivale a Verdadero
# - 0 equivale a Falso
# - Las operaciones lógicas AND, OR y NOT se denotan como:

#   \begin{center}
# 	\begin{tabular}{|ccccc|}
# 		\hline
# 		 AND & $A \land B$ &  $A \cap B$ & $A\cdot B$ & \begin{circuitikz} \draw (0,0) node[and port] {}; \end{circuitikz}\\
# 		 OR & $A \lor B$  & $A \cup B$ & $ A+B$  & \begin{circuitikz} \draw (0,0) node[or port] {}; \end{circuitikz}\\
# 		 NOT & $\lnot A$ & $A^{\complement}$ & $\bar{A}$ & \begin{circuitikz} \draw (0,0) node[not port] {}; \end{circuitikz}\\ 
# 		\hline
# 	 \end{tabular}
#   \end{center}
  
# - Es importante notar que las compuertas NAND y NOR son las
#   respectivas negaciones de las compuertas AND y OR i.e.

# $$A \, NAND\, B = \lnot(A \land B) = \overline{A \land B}$$

# $$A \, NOR\, B = \lnot(A \lor B) = \overline{A \lor B}$$

# - AND, OR y NOT son un conjunto funcionalmente completo. 
# - NAND y NOR pueden implementar cualquier circuito digital ya que las
#   AND, OR y NOT se pueden implementar directamente sólo con compuertas
#   NAND o NOR. Condición favorable para procesos de fabricación.


# ** Circuitos Combinacionales 
# - Conjunto de compuertas lógicas interconectadas cuya salida, en un
# momento dado, es función únicamente de las entradas en ese instante.
# - La relación puede ser expresada por /funciones booleanas/ o por
#   /tablas de verdad/.
# - La ecuación booleana se puede simplificar con aplicación de las
#   identidades o postulados básicos del álgebra booleana o por Mapas de
#   Karnaugh
# - Se pueden expresar como Suma de Productos (SOP) o productos de sumas
#   (POS)
# - El Teorema de Morgan permite hacer la conmutación de las dos
#   representaciones.

# ** Circuitos Secuenciales
# La salida actual de estos circuitos depende de la entrada actual y de
# la historia pasada de las entradas. Estos circuitos usan una
# señal de reloj, generalmente. Ejemplos son:

# - Biestables o latch SR
# - Biestable D
# - Registros
# - Contadores Síncronos

# ** Ejercicios
#    :PROPERTIES:
#    :BEAMER_opt: allowframebreaks
#    :END:
# 1. A partir de la tabla de verdad de la compuerta OR exclusiva obtenga
#    la función booleana como SOP (min-términos).
# 2. Para el ejercicio anterior obtenga la representación en POS
#    (max-términos).
# 3. ¿Puede representar el circuito sólo con compuertas NAND?
# 4. Simplificar $F = ACD+\bar{A}BCD$. Resp:$CD(A+B)$ 
# 5. Simplificar $F=ABC+A\bar{B}\overline{\bar{A}\bar{C}}$ R: $A(\bar{B}C)$
# 6. A partir de la Tabla [[tab-ejercicio]]  de verdad obtener la representación
#    en SOP.
# 7. Usando Mapas de Karnaugh obtenga la simplificación del circuito de
#    la Tabla [[tab-ejercicio]]

# #+CAPTION: Ejercicio de tres variables
# #+NAME: tab-ejercicio
# +--+--+--+--+
# |A  B  C | F|
# +--+--+--+--+
# |0   0  0|0 |
# |0   0  1|0 |
# |0   1  0|1 |
# |0   1  1|1 |
# |1   0  0|0 |
# |1   0  1|0 |
# |1   1  0|1 |
# |1   1  1|0 |
# +--+--+--+--+



** COMMENT Tarea
*** COMMENT Tarea                                                   :B_definition:Tarea:
    # :PROPERTIES:
    # :BEAMER_env: definition
    # :END:

    # Escribir una función en python que permita dado un número binario de 8
    # bits obtener su negativo usando el criterio de signo magnitud


